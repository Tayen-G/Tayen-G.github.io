<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tayen&#39;s Blog</title>
  <subtitle>行走在路上~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tayen-g.github.io/"/>
  <updated>2017-08-07T10:13:46.423Z</updated>
  <id>https://tayen-g.github.io/</id>
  
  <author>
    <name>Tayen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【音乐】分享一个街头演奏集锦</title>
    <link href="https://tayen-g.github.io/2017/08/08/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%A1%97%E5%A4%B4%E6%BC%94%E5%A5%8F%E9%9B%86%E9%94%A6/"/>
    <id>https://tayen-g.github.io/2017/08/08/分享一个街头演奏集锦/</id>
    <published>2017-08-07T17:53:30.000Z</published>
    <updated>2017-08-07T10:13:46.423Z</updated>
    
    <content type="html"><![CDATA[<p>这大概就是活成了自己喜欢的样子，过上了自己想要的生活。<br><a id="more"></a></p>
 
<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=12132110&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">

 
<p>加油。<br>共勉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这大概就是活成了自己喜欢的样子，过上了自己想要的生活。&lt;br&gt;
    
    </summary>
    
      <category term="音乐" scheme="https://tayen-g.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="音乐" scheme="https://tayen-g.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="生活" scheme="https://tayen-g.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>MVC学习（理论篇）</title>
    <link href="https://tayen-g.github.io/2017/08/08/2017-08-07-MVC%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%89/"/>
    <id>https://tayen-g.github.io/2017/08/08/2017-08-07-MVC学习（理论篇）/</id>
    <published>2017-08-07T17:03:54.000Z</published>
    <updated>2017-08-07T09:48:12.957Z</updated>
    
    <content type="html"><![CDATA[<p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，是一种设计创建 Web 应用程序的模式。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。<br><a id="more"></a></p>
<h2 id="MVC含义"><a href="#MVC含义" class="headerlink" title="MVC含义"></a>MVC含义</h2><ul>
<li>Model 是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。一般在model中定义一些用于存取数据的函数，需要操作时在Controller中调用。</li>
<li>View 是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。也就是我们能直观看到的部分。</li>
<li>Controller 是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。调用model中的函数进行对数据的操作；调用框架核心文件中的函数对视图进行操作。</li>
</ul>
<h2 id="关于MVC的个人理解"><a href="#关于MVC的个人理解" class="headerlink" title="关于MVC的个人理解"></a>关于MVC的个人理解</h2><p>在学习这方面的内容的时候感觉理解有些困难，不知道大家有没有这样的感觉。看了许多相关文章介绍，感觉最形象的形容，就是把Model看作厨师，View看作菜单，Controller看作服务员，顾客通过菜单，向服务员点菜，服务员把获取到的这一信息交给后厨，厨师做菜，把做好的菜交给顾客。顾客也就是用户。顾客吃到了菜，就是用户在视图层看到了预期的反馈。</p>
<h2 id="MVC工作流程"><a href="#MVC工作流程" class="headerlink" title="MVC工作流程"></a>MVC工作流程</h2><ol>
<li>浏览者-&gt;调用控制器，发出指令</li>
<li>控制器-&gt;按指令选取一个合适的模型</li>
<li>模型-&gt;按控制器指令取得相应数据</li>
<li>控制器-&gt;按指令选取相应视图</li>
<li>视图-&gt;控制器把第三步取得的数据按用户想要的样子显示</li>
</ol>
<h2 id="MVC模式的作用"><a href="#MVC模式的作用" class="headerlink" title="MVC模式的作用"></a>MVC模式的作用</h2><p>MVC分层有助于管理复杂的应用程序，因为开发人员可以在一个时间内专门关注一个方面。例如，可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。<br>MVC分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。</p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h2><p>以上大多数内容来自百科。单看理论性的文章可能很难理解MVC的工作流程或者设计方法。在后边我会写一个基于MVC模式的框架，通过完成一个框架，会加深对这个概念的理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，是一种设计创建 Web 应用程序的模式。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://tayen-g.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Php" scheme="https://tayen-g.github.io/tags/Php/"/>
    
      <category term="设计模式" scheme="https://tayen-g.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记（实现）</title>
    <link href="https://tayen-g.github.io/2017/07/31/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>https://tayen-g.github.io/2017/07/31/Ajax学习笔记（实现）/</id>
    <published>2017-07-31T08:53:00.000Z</published>
    <updated>2017-07-31T03:18:08.396Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章提到了Ajax相关的理论知识，这一篇来写一写具体的原生实现。<br><a id="more"></a><br>用来测试的页面具体思路是通过在输入框中输入员工编号，即时的查询是否有此员工存在并显示查询结果。<br>首先写后台，用php。<br>这里用一个数组储存员工信息，将脚本保存为doAction.php。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    header(<span class="string">"Content-Type:text/plain;charset=utf-8"</span>);</div><div class="line">    $staff = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"大"</span>,<span class="string">"number"</span>=&gt;<span class="string">"101"</span>,<span class="string">"sex"</span>=&gt;<span class="string">"男"</span>,<span class="string">"job"</span>=&gt;<span class="string">"经理"</span>),</div><div class="line">    <span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"二"</span>,<span class="string">"number"</span>=&gt;<span class="string">"102"</span>,<span class="string">"sex"</span>=&gt;<span class="string">"男"</span>,<span class="string">"job"</span>=&gt;<span class="string">"工程师"</span>),</div><div class="line">    <span class="keyword">array</span>(<span class="string">"name"</span>=&gt;<span class="string">"三"</span>,<span class="string">"number"</span>=&gt;<span class="string">"103"</span>,<span class="string">"sex"</span>=&gt;<span class="string">"女"</span>,<span class="string">"job"</span>=&gt;<span class="string">"销售"</span>)</div><div class="line">    );    </div><div class="line">    $number=$_GET[<span class="string">'number'</span>];</div><div class="line">    <span class="keyword">foreach</span> ($staff <span class="keyword">as</span> $value) &#123;</div><div class="line">      <span class="keyword">if</span>($value[<span class="string">'number'</span>]==$number)&#123;</div><div class="line">        $result=<span class="string">"找到员工，编号："</span>.$value[<span class="string">'number'</span>].<span class="string">"，姓名："</span>.$value[<span class="string">'name'</span>].<span class="string">"，性别"</span>.$value[<span class="string">'sex'</span>].<span class="string">"，职位"</span>.$value[<span class="string">'job'</span>];</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        $result=<span class="string">"没有找到员工"</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> $result;</div></pre></td></tr></table></figure></p>
<p>接下来是前端页面,以及要实现ajax的js代码。<br>说一下其中几个关键点：</p>
<ul>
<li>输入框中，添加onkeyup属性，即松开键盘时执行search()函数</li>
<li>js代码中，首先创建XMLHttpRequest对象，用open方法发起一个请求。因为是Get方法，所以要在url中添加要查询的关键字number</li>
<li>接下来用send方法发送请求</li>
<li>每当readystate发生改变时，调用onreadystatechange所存储的函数</li>
<li>readystate返回当前XMLHttpRequest请求的状态，分别有以下五种（表格来自w3school）</li>
</ul>
<table>
<thead>
<tr>
<th>状态</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Uninitialized</td>
<td>初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置</td>
</tr>
<tr>
<td>1</td>
<td>Open</td>
<td>open() 方法已调用，但是 send() 方法未调用。请求还没有被发送</td>
</tr>
<tr>
<td>2</td>
<td>Sent</td>
<td>Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应</td>
</tr>
<tr>
<td>3</td>
<td>Receiving</td>
<td>所有响应头部都已经接收到。响应体开始接收但未完成</td>
</tr>
<tr>
<td>4</td>
<td>Loaded</td>
<td>HTTP 响应已经完全接收</td>
</tr>
</tbody>
</table>
<ul>
<li>status是由服务器返回的状态码，200表示成功，常见错误404，表示未找到资源。</li>
</ul>
<p>通过js判断与服务器交换数据是否成功，成功的话显示服务器返回的文本，即responseText，不成功的话返回服务器的状态码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;h2&gt;员工查询&lt;<span class="regexp">/h2&gt; 请输入员工编号：</span></div><div class="line"><span class="regexp">  &lt;input type="text" name="keyword" id="keyword" onkeyup="search()"&gt;</span></div><div class="line"><span class="regexp">  &lt;br/</span>&gt;</div><div class="line">  &lt;p id=<span class="string">"searchResult"</span>&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">      request.open(<span class="string">'GET'</span>, <span class="string">'doAction.php?number='</span> + <span class="built_in">document</span>.getElementById(<span class="string">'keyword'</span>).value);</div><div class="line">      request.send();</div><div class="line">      request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span>&amp;&amp;request.status === <span class="number">200</span>) &#123;</div><div class="line">           <span class="built_in">document</span>.getElementById(<span class="string">'searchResult'</span>).innerHTML = request.responseText;</div><div class="line">          <span class="keyword">else</span> &#123;</div><div class="line">          alert(request.status);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    &lt;script&gt;</div></pre></td></tr></table></figure></p>
<p>以上是利用Get方法进行Ajax技术的实现。利用Post方法同样可以实现这一技术。首先在php页面做改动，将<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$number=$_GET[<span class="string">'number'</span>];</div></pre></td></tr></table></figure></p>
<p>更改为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$number=$_POST[<span class="string">'number'</span>];</div></pre></td></tr></table></figure></p>
<p>前端页面中，将<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request.open(<span class="string">'GET'</span>, <span class="string">'doAction.php?number='</span> + <span class="built_in">document</span>.getElementById(<span class="string">'keyword'</span>).value);</div><div class="line">request.send();</div></pre></td></tr></table></figure></p>
<p>更改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">request.open(<span class="string">'POST'</span>, <span class="string">'doAction.php'</span>);</div><div class="line"><span class="keyword">var</span> data=<span class="string">'number='</span>+<span class="built_in">document</span>.getElementByID(<span class="string">'keyword'</span>).value;</div><div class="line">request.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">request.send(data);</div></pre></td></tr></table></figure></p>
<ul>
<li>使用POST方法时，一定要在Open和send中间加这一句<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>个人理解是因为GET方法和POST方法给后台传递数据的方式不同。可以详细了解一下HTTP协议。</p>
<ul>
<li>构造一个变量作为send方法的参数。这个变量的格式类似表单提交。</li>
</ul>
<p>最后贴个测试结果。<br>首先打开页面<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otqluvomk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170731102831.png" alt="打开页面无输入" title="">
                </div>
                <div class="image-caption">打开页面无输入</div>
            </figure><br>输入没有查询结果的数字<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otqluvomk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170731102842.png" alt="输入没有结果的查询" title="">
                </div>
                <div class="image-caption">输入没有结果的查询</div>
            </figure><br>输入有查询结果的数字<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otqluvomk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170731102852.png" alt="输入有结果的查询" title="">
                </div>
                <div class="image-caption">输入有结果的查询</div>
            </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章提到了Ajax相关的理论知识，这一篇来写一写具体的原生实现。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://tayen-g.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ajax" scheme="https://tayen-g.github.io/tags/Ajax/"/>
    
      <category term="Php" scheme="https://tayen-g.github.io/tags/Php/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记（理论篇）</title>
    <link href="https://tayen-g.github.io/2017/07/27/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%89/"/>
    <id>https://tayen-g.github.io/2017/07/27/Ajax学习笔记（理论篇）/</id>
    <published>2017-07-27T15:42:25.000Z</published>
    <updated>2017-07-31T01:43:51.163Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX即异步JavaScript和XML。是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，可以使网页实现异步更新，在不重新加载整个网页的情况下，对网页的某部分内容进行更新。<br><a id="more"></a></p>
<h1 id="了解HTTP"><a href="#了解HTTP" class="headerlink" title="了解HTTP"></a>了解HTTP</h1><ul>
<li><h2 id="计算机通过网络进行通信的规则"><a href="#计算机通过网络进行通信的规则" class="headerlink" title="计算机通过网络进行通信的规则"></a>计算机通过网络进行通信的规则</h2></li>
<li><h2 id="无状态的协议"><a href="#无状态的协议" class="headerlink" title="无状态的协议"></a>无状态的协议</h2>   不建立持久连接，服务端不保留客户端信息</li>
<li><h2 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h2><ol>
<li>建立tcp连接</li>
<li>浏览器向服务器发送请求命令</li>
<li>浏览器发送请求头信息</li>
<li>服务器应答</li>
<li>服务器发送应答头信息</li>
<li>服务器向浏览器发送数据 </li>
<li>服务器关闭tcp连接</li>
</ol>
<ul>
<li><h2 id="http请求（四个部分）"><a href="#http请求（四个部分）" class="headerlink" title="http请求（四个部分）"></a>http请求（四个部分）</h2><ol>
<li>请求的方法或动作（例如GET或POST）</li>
<li>正在请求的URL</li>
<li>请求头，包含客户端环境信息，身份验证信息等</li>
<li>请求体，请求的正文，包含客户端提交的信息</li>
</ol>
</li>
<li><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>一般用于信息获取，使用URL传递参数，对发送信息的数量有限制。<br>幂等：执行一次或执行多次获取的信息是相同的。</p>
</li>
<li><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>一般用于修改服务器上的资源，对于发送的信息数量无限制。</p>
</li>
<li><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><ol>
<li>状态码，显示请求成功/失败；<ul>
<li>1xx 受到请求，正在处理</li>
<li>2xx 请求被正确接收</li>
<li>3xx 重定向</li>
<li>4xx 客户端错误（提交的请求有误）</li>
<li>5xx 服务器错误（不能完成对请求的处理）</li>
</ul>
</li>
<li>响应头，包含服务端的一些信息；</li>
<li>响应体，响应正文，服务器返回的资源。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h1 id="Ajax核心"><a href="#Ajax核心" class="headerlink" title="Ajax核心"></a>Ajax核心</h1><ul>
<li><h2 id="IE6以上的浏览器"><a href="#IE6以上的浏览器" class="headerlink" title="IE6以上的浏览器"></a>IE6以上的浏览器</h2><p>创建XMLHttpRequset()对象<br>eg：request=new XMLHttpRequest();</p>
</li>
<li><h2 id="IE6以下"><a href="#IE6以下" class="headerlink" title="IE6以下"></a>IE6以下</h2><p>request=new ActiveXObject(“Microsoft.XMLHTTP”);</p>
</li>
<li><h2 id="XMLHttpRequest发送请求"><a href="#XMLHttpRequest发送请求" class="headerlink" title="XMLHttpRequest发送请求"></a>XMLHttpRequest发送请求</h2><ul>
<li><h3 id="构造请求open-method-url-async"><a href="#构造请求open-method-url-async" class="headerlink" title="构造请求open(method,url[,async])"></a>构造请求open(method,url[,async])</h3>method：发送请求的方法<br>url：请求的地址（可使用相对地址）<br>async：请求是异步/同步（true/false）默认true</li>
<li><h3 id="发送send-string"><a href="#发送send-string" class="headerlink" title="发送send(string)"></a>发送send(string)</h3>string：GET方法:NULL；POST方法:需要参数，以及http头信息</li>
</ul>
</li>
<li><h2 id="XMLHttpRequest获取响应"><a href="#XMLHttpRequest获取响应" class="headerlink" title="XMLHttpRequest获取响应"></a>XMLHttpRequest获取响应</h2><ul>
<li>reponseText：获取字符串形式的响应数据</li>
<li>reponseXML：获取XML形式的响应数据</li>
<li>status/statusText：以数字/文本的形式返回http状态码</li>
<li>getAllResponseHeader()：获取所有的响应报头</li>
<li><p>getResponseHeaer()：查询响应中某个字段的值</p>
</li>
<li><p>readyState属性：代表服务器响应的变化</p>
<ul>
<li>0：请求未初始化，open还没调用</li>
<li>1：服务器连接已建立，open已调用</li>
<li>2：请求已接收，收到头信息</li>
<li>3：请求处理中，收到响应主体</li>
<li>4：请求已完成，响应已就绪</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>用onreadystatechange方法判断响应是否完成</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">request.onreaystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(request.readyState===<span class="number">4</span>&amp;&amp;request.status===<span class="number">200</span>)<span class="comment">//请求成功</span></div><div class="line">    <span class="comment">//进一步操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AJAX即异步JavaScript和XML。是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，可以使网页实现异步更新，在不重新加载整个网页的情况下，对网页的某部分内容进行更新。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="https://tayen-g.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ajax" scheme="https://tayen-g.github.io/tags/Ajax/"/>
    
      <category term="Php" scheme="https://tayen-g.github.io/tags/Php/"/>
    
  </entry>
  
</feed>
