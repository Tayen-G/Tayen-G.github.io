{"meta":{"title":"Tayen's Blog","subtitle":"行走在路上~","description":null,"author":"Tayen","url":"https://tayen-g.github.io"},"pages":[{"title":"分类","date":"2017-07-28T10:06:38.000Z","updated":"2017-07-28T02:44:04.504Z","comments":false,"path":"categories/index.html","permalink":"https://tayen-g.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-07-28T03:38:29.720Z","updated":"2017-07-28T03:38:29.659Z","comments":false,"path":"tags/index.html","permalink":"https://tayen-g.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Ajax学习笔记（实现）","slug":"Ajax学习笔记（实现）","date":"2017-07-31T08:53:00.000Z","updated":"2017-07-31T02:54:30.895Z","comments":true,"path":"2017/07/31/Ajax学习笔记（实现）/","link":"","permalink":"https://tayen-g.github.io/2017/07/31/Ajax学习笔记（实现）/","excerpt":"上篇文章提到了Ajax相关的理论知识，这一篇来写一写具体的原生实现。","text":"上篇文章提到了Ajax相关的理论知识，这一篇来写一写具体的原生实现。用来测试的页面具体思路是通过在输入框中输入员工编号，即时的查询是否有此员工存在并显示查询结果。首先写后台，用php。这里用一个数组储存员工信息，将脚本保存为doAction.php。1234567891011121314151617&lt;?php header(\"Content-Type:text/plain;charset=utf-8\"); $staff = array(array(\"name\"=&gt;\"大\",\"number\"=&gt;\"101\",\"sex\"=&gt;\"男\",\"job\"=&gt;\"经理\"), array(\"name\"=&gt;\"二\",\"number\"=&gt;\"102\",\"sex\"=&gt;\"男\",\"job\"=&gt;\"工程师\"), array(\"name\"=&gt;\"三\",\"number\"=&gt;\"103\",\"sex\"=&gt;\"女\",\"job\"=&gt;\"销售\") ); $number=$_GET['number']; foreach ($staff as $value) &#123; if($value['number']==$number)&#123; $result=\"找到员工，编号：\".$value['number'].\"，姓名：\".$value['name'].\"，性别\".$value['sex'].\"，职位\".$value['job']; break; &#125;else &#123; $result=\"没有找到员工\"; &#125; &#125; echo $result; 接下来是前端页面,以及要实现ajax的js代码。说一下其中几个关键点： 输入框中，添加onkeyup属性，即松开键盘时执行search()函数 js代码中，首先创建XMLHttpRequest对象，用open方法发起一个请求。因为是Get方法，所以要在url中添加要查询的关键字number 接下来用send方法发送请求 每当readystate发生改变时，调用onreadystatechange所存储的函数 readystate返回当前XMLHttpRequest请求的状态，分别有以下五种（表格来自w3school） 状态 名称 描述 0 Uninitialized 初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置 1 Open open() 方法已调用，但是 send() 方法未调用。请求还没有被发送 2 Sent Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应 3 Receiving 所有响应头部都已经接收到。响应体开始接收但未完成 4 Loaded HTTP 响应已经完全接收 status是由服务器返回的状态码，200表示成功，常见错误404，表示未找到资源。 通过js判断与服务器交换数据是否成功，成功的话显示服务器返回的文本，即responseText，不成功的话返回服务器的状态码。1234567891011121314151617181920&lt;h2&gt;员工查询&lt;/h2&gt; 请输入员工编号： &lt;input type=\"text\" name=\"keyword\" id=\"keyword\" onkeyup=\"search()\"&gt; &lt;br/&gt; &lt;p id=\"searchResult\"&gt;&lt;/p&gt; &lt;script type=\"text/javascript\"&gt; function search() &#123; var request = new XMLHttpRequest(); request.open('GET', 'doAction.php?number=' + document.getElementById('keyword').value); request.send(); request.onreadystatechange = function() &#123; if (request.readyState === 4&amp;&amp;request.status === 200) &#123; document.getElementById('searchResult').innerHTML = request.responseText; else &#123; alert(request.status); &#125; &#125; &#125; &#125; &lt;script&gt; 以上是利用Get方法进行Ajax技术的实现。利用Post方法同样可以实现这一技术。首先在php页面做改动，将1$number=$_GET['number']; 更改为1$number=$_POST['number']; 前端页面中，将12request.open('GET', 'doAction.php?number=' + document.getElementById('keyword').value);request.send(); 更改为1234request.open('POST', 'doAction.php');var data='number='+document.getElementByID('keyword').value;request.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");request.send(data); 使用POST方法时，一定要在Open和send中间加这一句‘’’phprequest.setRequestHeader(“Content-Type”,”application/x-www-form-urlencoded”);```个人理解是因为GET方法和POST方法给后台传递数据的方式不同。可以详细了解一下HTTP协议。 构造一个变量作为send方法的参数。这个变量的格式类似表单提交。 最后贴个测试结果。首先打开页面 打开页面无输入 输入没有查询结果的数字 输入没有结果的查询 输入有查询结果的数字 输入有结果的查询","categories":[{"name":"学习","slug":"学习","permalink":"https://tayen-g.github.io/categories/学习/"}],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://tayen-g.github.io/tags/Ajax/"},{"name":"Php","slug":"Php","permalink":"https://tayen-g.github.io/tags/Php/"}]},{"title":"Ajax学习笔记（理论篇）","slug":"2017-7-27-Ajax学习笔记（理论篇）","date":"2017-07-27T15:42:25.000Z","updated":"2017-07-31T01:43:51.163Z","comments":true,"path":"2017/07/27/2017-7-27-Ajax学习笔记（理论篇）/","link":"","permalink":"https://tayen-g.github.io/2017/07/27/2017-7-27-Ajax学习笔记（理论篇）/","excerpt":"AJAX即异步JavaScript和XML。是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，可以使网页实现异步更新，在不重新加载整个网页的情况下，对网页的某部分内容进行更新。","text":"AJAX即异步JavaScript和XML。是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，可以使网页实现异步更新，在不重新加载整个网页的情况下，对网页的某部分内容进行更新。 了解HTTP 计算机通过网络进行通信的规则 无状态的协议 不建立持久连接，服务端不保留客户端信息 请求过程 建立tcp连接 浏览器向服务器发送请求命令 浏览器发送请求头信息 服务器应答 服务器发送应答头信息 服务器向浏览器发送数据 服务器关闭tcp连接 http请求（四个部分） 请求的方法或动作（例如GET或POST） 正在请求的URL 请求头，包含客户端环境信息，身份验证信息等 请求体，请求的正文，包含客户端提交的信息 GET一般用于信息获取，使用URL传递参数，对发送信息的数量有限制。幂等：执行一次或执行多次获取的信息是相同的。 POST一般用于修改服务器上的资源，对于发送的信息数量无限制。 HTTP响应 状态码，显示请求成功/失败； 1xx 受到请求，正在处理 2xx 请求被正确接收 3xx 重定向 4xx 客户端错误（提交的请求有误） 5xx 服务器错误（不能完成对请求的处理） 响应头，包含服务端的一些信息； 响应体，响应正文，服务器返回的资源。 Ajax核心 IE6以上的浏览器创建XMLHttpRequset()对象eg：request=new XMLHttpRequest(); IE6以下request=new ActiveXObject(“Microsoft.XMLHTTP”); XMLHttpRequest发送请求 构造请求open(method,url[,async])method：发送请求的方法url：请求的地址（可使用相对地址）async：请求是异步/同步（true/false）默认true 发送send(string)string：GET方法:NULL；POST方法:需要参数，以及http头信息 XMLHttpRequest获取响应 reponseText：获取字符串形式的响应数据 reponseXML：获取XML形式的响应数据 status/statusText：以数字/文本的形式返回http状态码 getAllResponseHeader()：获取所有的响应报头 getResponseHeaer()：查询响应中某个字段的值 readyState属性：代表服务器响应的变化 0：请求未初始化，open还没调用 1：服务器连接已建立，open已调用 2：请求已接收，收到头信息 3：请求处理中，收到响应主体 4：请求已完成，响应已就绪 用onreadystatechange方法判断响应是否完成 1234request.onreaystatechange=function()&#123; if(request.readyState===4&amp;&amp;request.status===200)//请求成功 //进一步操作&#125;","categories":[{"name":"学习","slug":"学习","permalink":"https://tayen-g.github.io/categories/学习/"}],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://tayen-g.github.io/tags/Ajax/"},{"name":"Php","slug":"Php","permalink":"https://tayen-g.github.io/tags/Php/"}]}]}